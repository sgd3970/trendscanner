import mongoose from 'mongoose';

const postSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true
  },
  content: {
    type: String,
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  keywords: {
    type: [String],
    default: [],
    trim: true
  },
  views: {
    type: Number,
    default: 0
  },
  likes: {
    type: Number,
    default: 0
  },
  imageUrl: {
    type: String,
    trim: true
  },
  gptImageUrl: {
    type: String,
  },
  slug: {
    type: String,
    trim: true,
    unique: true,
    sparse: true
  },
  description: String,
  featuredImage: {
    url: String,
    alt: String,
    credit: {
      name: String,
      url: String
    }
  },
  viewCount: { type: Number, default: 0 },
  likeCount: { type: Number, default: 0 },
  metadata: {
    autoGenerated: {
      type: Boolean,
      default: false,
    },
    generationSource: String,
    originalTopic: String,
    searchKeywords: [String],
    imageKeywords: [String]
  },
}, {
  timestamps: true,
});

// 업데이트 시 updatedAt 필드 자동 갱신
postSchema.pre('save', function(next) {
  this.updatedAt = new Date();
  next();
});

// 조회수 증가 메서드
postSchema.methods.incrementViews = async function() {
  this.views += 1;
  await this.save();
};

// 좋아요 수 증가 메서드
postSchema.methods.incrementLikes = async function() {
  this.likes += 1;
  await this.save();
};

// 좋아요 수 감소 메서드
postSchema.methods.decrementLikes = async function() {
  if (this.likes > 0) {
    this.likes -= 1;
    await this.save();
  }
};

const Post = mongoose.models.Post || mongoose.model('Post', postSchema);

export default Post; 