import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import KeywordCache from '@/models/KeywordCache';
import Post from '@/models/Post';
import OpenAI from 'openai';
import { createApi } from 'unsplash-js';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

const unsplash = createApi({
  accessKey: process.env.UNSPLASH_ACCESS_KEY!,
});

export const dynamic = 'force-dynamic';
export const revalidate = 0;
export const maxDuration = 60; // 60초로 수정 (Vercel Hobby 플랜 제한)

function generateSlug(title: string): string {
  return title
    .toLowerCase()
    .replace(/[^ㄱ-힝a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/--+/g, '-')
    .replace(/^-+|-+$/g, '');
}

export async function POST(request: Request) {
  try {
    console.log('자동 포스트 생성 시작');
    await connectDB();

    const { keywordCount } = await request.json();
    if (!keywordCount || keywordCount < 1 || keywordCount > 5) {
      return NextResponse.json(
        { error: '키워드 개수는 1~5개 사이여야 합니다.' },
        { status: 400 }
      );
    }

    const unusedKeywords = await KeywordCache.find({ used: false });
    if (unusedKeywords.length < keywordCount) {
      return NextResponse.json(
        { error: '사용 가능한 키워드가 부족합니다.' },
        { status: 400 }
      );
    }

    const selectedKeywords = unusedKeywords.sort(() => 0.5 - Math.random()).slice(0, keywordCount);
    const createdPosts = [];

    for (const { keyword, _id } of selectedKeywords) {
      try {
        console.log(`\n[${keyword}] 포스트 생성 시작`);

        const prompt = `
당신은 트렌드 분석 블로그 작가입니다. 아래 키워드를 바탕으로 블로그 글을 작성해주세요.

- **전체 글자 수는 최소 1500자 이상**
- **문단 간 줄바꿈 포함**
- **소제목은 Markdown 형식으로(##)**
- **각 소제목마다 문단을 400자 이상 작성**
- **도입부/본문/분석/전망 구조**
- **중요 문장은 굵게 처리**
- **절대 영어/불필요한 텍스트 없이 한국어만 작성**

결과는 다음 JSON 형식으로 응답하세요. JSON 이외 텍스트는 절대 포함하지 마세요.
{
  "title": "흥미롭고 자연스러운 블로그 제목 (한국어)",
  "content": "# 도입부\n\n(300자 이상 도입부)\n\n## 트렌드 분석\n\n(400자 이상 상세 설명)\n\n## 전문가 시각\n\n(400자 이상 분석과 예측)\n\n## 결론\n\n(300자 이상 요약 및 전망)",
  "hashtags": ["관련태그1", "관련태그2", "관련태그3", "관련태그4", "관련태그5"],
  "imageQuery": "이미지 검색용 영어 키워드"
}

키워드: ${keyword}
`;

        const gptResponse = await openai.chat.completions.create({
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 3000,
        });

        let parsedResponse;
        try {
          const raw = gptResponse.choices[0].message?.content?.trim() || '';
          console.log(`[${keyword}] GPT 응답 파싱 시도 - 원본:`, raw);

          const jsonMatch = raw.match(/\{[\s\S]*\}/);
          const jsonStr = jsonMatch ? jsonMatch[0] : raw;
          console.log(`[${keyword}] JSON 문자열 추출:`, jsonStr);

          parsedResponse = JSON.parse(jsonStr);
          console.log(`[${keyword}] GPT 응답 파싱 성공:`, parsedResponse);

          const originalContent = parsedResponse.content;
          parsedResponse.content = parsedResponse.content
            .replace(/!\[.*?\]\(.*?\)/g, '')
            .replace(/https?:\/\/[\S]+\.(jpg|jpeg|png|gif|webp)/gi, '')
            .trim();

          if (originalContent !== parsedResponse.content) {
            console.log(`[${keyword}] 본문에서 이미지 관련 내용 제거됨`);
          }
        } catch (error) {
          console.error(`[${keyword}] GPT 응답 파싱 실패:`, error);
          throw new Error(`GPT 응답 파싱 실패: ${error instanceof Error ? error.message : '알 수 없는 오류'}`);
        }

        let imageUrl = '';
        try {
          const query = parsedResponse.imageQuery || parsedResponse.title || keyword;
          const imageResponse = await unsplash.photos.getRandom({ query, count: 1 });

          if (Array.isArray(imageResponse.response)) {
            imageUrl = imageResponse.response[0]?.urls?.regular || '';
          } else if (imageResponse.response?.urls?.regular) {
            imageUrl = imageResponse.response.urls.regular;
          }
        } catch (error) {
          console.warn(`[${keyword}] Unsplash 이미지 가져오기 실패:`, error);
        }

        const post = await Post.create({
          title: parsedResponse.title || keyword,
          slug: generateSlug(parsedResponse.title || keyword),
          content: parsedResponse.content,
          imageUrl,
          tags: parsedResponse.hashtags || [keyword],
          metadata: {
            autoGenerated: true,
            keywords: [keyword],
          },
        });

        await KeywordCache.findByIdAndUpdate(_id, { used: true });

        createdPosts.push({
          _id: post._id,
          title: post.title,
          content: post.content,
          imageUrl: post.imageUrl,
          tags: post.tags,
          createdAt: post.createdAt,
        });
      } catch (error) {
        console.error(`[${keyword}] 포스트 생성 실패:`, error);
        continue;
      }
    }

    if (createdPosts.length === 0) {
      return NextResponse.json(
        { error: '포스트 생성에 실패했습니다.' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      message: '포스트가 성공적으로 생성되었습니다.',
      count: createdPosts.length,
      posts: createdPosts,
    });
  } catch (error) {
    console.error('자동 포스트 생성 에러:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : '포스트 생성 중 오류가 발생했습니다.' },
      { status: 500 }
    );
  }
}
